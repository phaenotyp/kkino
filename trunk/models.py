from google.appengine.ext import db
from google.appengine.api import users
from util import sluggify
from settings import *

class Kino(db.Model):
    """Movie-Theater"""
    name = db.StringProperty(required=True)
    adress = db.PostalAddressProperty()
    geo = db.GeoPtProperty() 
    slug = db.StringProperty()

    @property 
    def static_map_url(self):
        """Returns an url to a map generated by googles static maps api"""
        if self.geo:
            url = 'http://maps.google.com/staticmap?markers=%f,%f&size=%s&key=%s' % (self.geo.lat, self.geo.lon, STATIC_MAPS_SIZE, GOOGLE_MAPS_KEY) 
            return url
        else: 
            return None
 
    @property
    def json(self): 
        """Returns a json represtation of the Kino-Model"""
        if self.geo: 
            gson = '{lat:%f,lon:%f }' % ( self.lat, self.lon )  
        else:
            gson = 'false'
        return """{ name:'%s', geo:%s, adress:'%s', url:'%s'  }""" % ( self.name, gson, self.adress, self.get_url )
     

    @property 
    def get_url(self): 
        """This can be used in templates cause it's a property""" 
        return '/kinos/%s/' % self.slug 

    def put(self):  
        """Overide put so that slug gets updated by name""" 
        self.slug = sluggify(self.name) 
        super(Kino, self).put()  

class Movie(db.Model):
    name = db.StringProperty(required=True)
    imdb = db.LinkProperty() 
    slug = db.StringProperty()

    def rating_by_user(self, user): 
        return MLRating.gql('WHERE user = :1 and movie = :2', user, self).fetch(1)[0].mlrating 

    def put(self):  
        """Overide put so that slug gets updated by name""" 
        self.slug = sluggify(self.name) 
        super(Kino, self).put()  

    @property 
    def get_url(self): 
        """This can be used in templates cause it's a property""" 
        return '/movies/%s/' % self.slug 

  

class Feature(db.Model):
    movie = db.ReferenceProperty(reference_class=Movie, collection_name="features")
    kino = db.ReferenceProperty(reference_class=Kino, collection_name="features")
    datetime = db.DateTimeProperty() 
    going = db.ListProperty(users.User) 

    def num_going(self): 
        if len(self.going)>0: 
            return len(self.going) 
        else: 
            return None
 
    @property
    def get_url(self):
        return '/features/%s/' % self.key().id()

class MLRating(db.Model): 
    """A Movie-Rating as pulled from movielens.org.

       Should be a Float between 1 and 5."""
    movie = db.ReferenceProperty(reference_class=Movie, collection_name="ratings")
    user = db.UserProperty()
    mlrating = db.FloatProperty() 

    # TODO: validate mlrating
    
class UserProfile(db.Model):
    user = db.UserProperty(required=True)
    movielens_url = db.LinkProperty()
    adress = db.StringProperty()  
    geo = db.GeoPtProperty() 
 
    @property 
    def features(self): 
        """Returns a query objects of all the Features this user is attending."""
        return Feature.gql('WHERE going = :1', self.user) 
 
    @property 
    def ratings(self): 
        """Returns a query-object of all the ratings of the user this profile blongs to""" 
        return MLRating.gql('WHERE user = :1', self.user) 
   
